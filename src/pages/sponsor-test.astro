---
import Layout from '../components/Layout.astro';
import SponsorCard from '../components/SponsorCard.astro';
import { mockSponsors, sponsorsByTier, sampleSponsor } from '../components/sponsorTestData';
import { sortSponsors, getSponsorGridClasses, getTierDisplayName } from '../components/sponsorUtils';

const pageTitle = 'Sponsor Component Testing';
const pageDescription = 'Testing page for sponsor components and layouts';

// Get active sponsors and sort them
const activeSponsors = sortSponsors(mockSponsors.filter(s => s.status === 'active'));
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 py-8 space-y-12">
    
    <!-- Page Header -->
    <div class="text-center space-y-4">
      <h1 class="text-4xl font-bold text-base-content">Sponsor Component Testing</h1>
      <p class="text-lg text-base-content/70 max-w-2xl mx-auto">
        This page demonstrates various sponsor card layouts, sizes, and configurations for development and testing purposes.
      </p>
    </div>

    <!-- Single Sponsor Card Examples -->
    <section class="space-y-6">
      <h2 class="text-2xl font-bold text-base-content">Individual Sponsor Cards</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="space-y-3">
          <h3 class="text-lg font-semibold">Small Size</h3>
          <SponsorCard sponsor={sampleSponsor} size="sm" />
        </div>
        
        <div class="space-y-3">
          <h3 class="text-lg font-semibold">Medium Size (Default)</h3>
          <SponsorCard sponsor={sampleSponsor} size="md" />
        </div>
        
        <div class="space-y-3">
          <h3 class="text-lg font-semibold">Large Size</h3>
          <SponsorCard sponsor={sampleSponsor} size="lg" />
        </div>
      </div>
    </section>

    <!-- Sponsor Cards with Descriptions -->
    <section class="space-y-6">
      <h2 class="text-2xl font-bold text-base-content">Cards with Descriptions</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <SponsorCard sponsor={sampleSponsor} size="md" showDescription={true} />
        <SponsorCard sponsor={sampleSponsor} size="lg" showDescription={true} />
      </div>
    </section>

    <!-- Sponsors by Tier -->
    {Object.entries(sponsorsByTier).map(([tier, sponsors]) => {
      if (sponsors.length === 0) return null;
      
      return (
        <section class="space-y-6">
          <h2 class="text-2xl font-bold text-base-content">
            {getTierDisplayName(tier as any)}
          </h2>
          
          <div class={`grid gap-6 ${getSponsorGridClasses(sponsors.length)}`}>
            {sponsors.map(sponsor => (
              <SponsorCard 
                key={sponsor.name}
                sponsor={sponsor} 
                size={tier === 'platinum' || tier === 'gold' ? 'lg' : 'md'}
                showDescription={tier === 'platinum' || tier === 'gold'}
              />
            ))}
          </div>
        </section>
      );
    })}

    <!-- All Active Sponsors Grid -->
    <section class="space-y-6">
      <h2 class="text-2xl font-bold text-base-content">All Active Sponsors</h2>
      <p class="text-base-content/70">
        Complete grid showing all active sponsors sorted by tier and importance.
      </p>
      
      <div class={`grid gap-6 ${getSponsorGridClasses(activeSponsors.length)}`}>
        {activeSponsors.map(sponsor => (
          <SponsorCard 
            key={sponsor.name}
            sponsor={sponsor}
            size={sponsor.tier === 'platinum' || sponsor.tier === 'gold' ? 'lg' : 'md'}
            showDescription={sponsor.tier === 'platinum'}
          />
        ))}
      </div>
    </section>

    <!-- Sponsor States Testing -->
    <section class="space-y-6">
      <h2 class="text-2xl font-bold text-base-content">Different Sponsor States</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Active Sponsor -->
        <div class="space-y-3">
          <h3 class="text-sm font-semibold text-green-600">Active</h3>
          <SponsorCard sponsor={{
            ...sampleSponsor,
            name: 'Active Sponsor',
            status: 'active'
          }} size="sm" />
        </div>
        
        <!-- Pending Sponsor -->
        <div class="space-y-3">
          <h3 class="text-sm font-semibold text-yellow-600">Pending</h3>
          <SponsorCard sponsor={{
            ...sampleSponsor,
            name: 'Pending Sponsor',
            status: 'pending'
          }} size="sm" />
        </div>
        
        <!-- Inactive Sponsor -->
        <div class="space-y-3">
          <h3 class="text-sm font-semibold text-gray-600">Inactive</h3>
          <SponsorCard sponsor={{
            ...sampleSponsor,
            name: 'Inactive Sponsor',
            status: 'inactive'
          }} size="sm" />
        </div>
        
        <!-- Expired Sponsor -->
        <div class="space-y-3">
          <h3 class="text-sm font-semibold text-red-600">Expired</h3>
          <SponsorCard sponsor={{
            ...sampleSponsor,
            name: 'Expired Sponsor',
            status: 'expired'
          }} size="sm" />
        </div>
      </div>
    </section>

    <!-- Sponsors without Logos -->
    <section class="space-y-6">
      <h2 class="text-2xl font-bold text-base-content">Sponsors without Logos</h2>
      <p class="text-base-content/70">
        Testing fallback display when sponsor logos are not available.
      </p>
      
      <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
        {['TechStart', 'DevCorp', 'CodeLab', 'InnovateCo'].map(name => (
          <SponsorCard 
            key={name}
            sponsor={{
              name,
              tier: 'community',
              status: 'active',
              description: `${name} - Testing without logo`
            }}
            size="sm"
          />
        ))}
      </div>
    </section>

    <!-- Responsive Grid Testing -->
    <section class="space-y-6">
      <h2 class="text-2xl font-bold text-base-content">Responsive Grid Testing</h2>
      
      <div class="space-y-8">
        {[1, 2, 3, 5, 8, 12].map(count => (
          <div key={count} class="space-y-3">
            <h3 class="text-lg font-semibold">{count} Sponsor{count !== 1 ? 's' : ''}</h3>
            <div class={`grid gap-4 ${getSponsorGridClasses(count)}`}>
              {Array.from({ length: count }, (_, i) => (
                <SponsorCard 
                  key={i}
                  sponsor={{
                    name: `Sponsor ${i + 1}`,
                    tier: 'community',
                    status: 'active'
                  }}
                  size="sm"
                />
              ))}
            </div>
          </div>
        ))}
      </div>
    </section>

    <!-- Development Notes -->
    <section class="bg-base-200 rounded-lg p-6 space-y-4">
      <h2 class="text-xl font-bold text-base-content">Development Notes</h2>
      <div class="text-sm text-base-content/70 space-y-2">
        <p>• This page is for development and testing purposes only</p>
        <p>• Sponsor logos are placeholder images and may not load</p>
        <p>• All sponsor data is mock data for demonstration</p>
        <p>• Test different screen sizes to see responsive behavior</p>
        <p>• Check accessibility with screen readers and keyboard navigation</p>
      </div>
    </section>

  </div>
</Layout>

<style>
  /* Additional styles for testing page */
  .container {
    max-width: 1200px;
  }
  
  /* Visual separator for sections */
  section:not(:last-child) {
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 3rem;
  }
  
  /* Dark theme support */
  [data-theme="dark"] section:not(:last-child) {
    border-bottom-color: #374151;
  }
</style>