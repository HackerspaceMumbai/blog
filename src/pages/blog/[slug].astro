---
import { getEntry, type CollectionEntry } from "astro:content";
import { Image } from 'astro:assets'; 
import Layout from "../../components/Layout.astro";
// Removed custom Prose.astro component

// Import the Image component

// Cover images are now handled by Astro's content collection image() helper

export async function getStaticPaths() {
  const { getCollection } = await import("astro:content");
  const posts = await getCollection("posts");
  return posts.map(post => ({ params: { slug: post.slug } }));
}

const { slug } = Astro.params;

if (typeof slug !== 'string') {
  throw new Error(`Invalid slug: ${slug}`);
}

const post = await getEntry("posts", slug);

if (!post) {
  throw new Error(`Post not found: ${slug}`);
}

// Render the post content
const { Content, headings, remarkPluginFrontmatter } = await post.render();

// --- Reading time estimate ---
function calculateReadingTime(text) {
  // Average reading speed: 200 words per minute
  const wordsPerMinute = 200;
  const words = text.split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return minutes;
}

// Get plain text from the post content for reading time calculation
let readingTime = 1;
try {
  // Use the raw markdown content from post.body
  if (post.body) {
    readingTime = calculateReadingTime(post.body);
  }
} catch (e) {
  readingTime = 1;
}

// The cover image is now handled by Astro's image() helper
// post.data.cover is already an ImageMetadata object when present
const coverImage = post.data.cover;
---

<style>
  .cover-image {
    width: 100%;
    max-width: 1200px;
    height: auto;
    object-fit: cover;
    margin-bottom: 1.5rem;
    border-radius: 8px;
  }
  
  .progress-bar-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 6px;
    z-index: 1000;
    background: transparent;
  }
  
  .progress-bar {
    height: 100%;
    background: var(--primary);
    width: 0%;
    transition: width 0.1s linear;
  }
  
  .blog-header {
    padding: 2rem 1rem;
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--border);
  }
  
  .blog-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .blog-meta {
    display: flex;
    align-items: center;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    color: var(--muted-foreground);
  }
  
  .blog-meta .dot {
    margin: 0 0.5rem;
  }
  
  .blog-title {
    font-size: 2.5rem;
    line-height: 1.2;
    margin-bottom: 1rem;
    font-weight: 800;
  }
  
  .blog-content {
    font-size: 1.125rem;
    line-height: 1.7;
  }
  
  .blog-footer {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .tag-list a {
    display: inline-block;
    background: var(--accent);
    color: var(--accent-foreground);
    padding: 0.25rem 0.75rem;
    border-radius: 2rem;
    font-size: 0.875rem;
    transition: all 0.2s ease;
  }
  
  .tag-list a:hover {
    background: var(--secondary);
    color: var(--secondary-foreground);
    transform: translateY(-1px);
  }
  
  .blog-navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .blog-navigation a {
    display: inline-flex;
    align-items: center;
    color: var(--primary);
    font-weight: 600;
  }
  
  .blog-navigation a:hover {
    text-decoration: underline;
    color: var(--primary-foreground);
  }
  
  /* Improved typography for content */
  .blog-content h2 {
    font-size: 1.75rem;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    font-weight: 700;
  }
  
  .blog-content h3 {
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
  }
  
  .blog-content p {
    margin-bottom: 1.5rem;
  }
  
  .blog-content ul, .blog-content ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }
  
  .blog-content li {
    margin-bottom: 0.5rem;
  }
  
  .blog-content pre {
    background: rgba(0, 0, 0, 0.2);
    padding: 1rem;
    border-radius: 6px;
    overflow-x: auto;
    margin-bottom: 1.5rem;
  }
  
  .blog-content blockquote {
    border-left: 4px solid var(--primary, #F9C412);
    padding-left: 1rem;
    margin-left: 0;
    margin-right: 0;
    font-style: italic;
    margin-bottom: 1.5rem;
  }
  
  .blog-content img {
    max-width: 100%;
    border-radius: 6px;
    margin: 1.5rem 0;
  }
  
  @media (max-width: 768px) {
    .blog-title {
      font-size: 2rem;
    }
    
    .blog-content {
      font-size: 1rem;
    }
  }
</style>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{post.data.title} | Hackerspace Mumbai Blog</title>
    <meta name="description" content={post.data.description} />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <div class="progress-bar-container">
      <div class="progress-bar" id="scroll-progress-bar"></div>
    </div>
    <Layout>
      <div class="blog-container">
        <header class="blog-header">
          <h1 class="blog-title text-foreground">{post.data.title}</h1>
          <div class="blog-meta">
            <span>By {post.data.author}</span>
            <span class="dot">•</span>
            <span>{new Date(post.data.date).toLocaleDateString('en-in', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}</span>
            <span class="dot">•</span>
            <span>{readingTime} min read</span>
          </div>
          
          {/* Use Astro's Image component for optimized cover images */}
          {coverImage && (
            <Image
              src={coverImage}
              alt={post.data.title}
              class="cover-image"
              loading="eager"
            />
          )}
        </header>
        
        <article class="prose prose-lg blog-content mx-auto text-foreground">
          <Content />
        </article>
        
        <footer class="blog-footer">
          {Array.isArray(post.data.tags) && post.data.tags.length > 0 && (
            <div>
              <h3 class="text-xl font-semibold mb-2">Tags</h3>
              <div class="tag-list">
                {post.data.tags.map((tag: string) => (
                  <a href={`/tags/${tag}`}>#{tag}</a>
                ))}
              </div>
            </div>
          )}
          
          {Array.isArray(post.data.categories) && post.data.categories.length > 0 && (
            <div class="mt-4">
              <h3 class="text-xl font-semibold mb-2">Categories</h3>
              <div class="tag-list">
                {post.data.categories.map((category: string) => (
                  <a href={`/categories/${category}`}>{category}</a>
                ))}
              </div>
            </div>
          )}
          
          <div class="blog-navigation">
            <a href="/blog">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Back to all posts
            </a>
            {/* This would be replaced with actual next/previous post links when implemented */}
            <div></div>
          </div>
        </footer>
      </div>
    </Layout>
    
    <script>
      // Progress bar scroll logic
      window.addEventListener('scroll', () => {
        const bar = document.getElementById('scroll-progress-bar');
        if (!bar) return;
        const doc = document.documentElement;
        const body = document.body;
        const scrollTop = window.scrollY || doc.scrollTop || body.scrollTop;
        const scrollHeight = (doc.scrollHeight || body.scrollHeight) - window.innerHeight;
        const progress = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;
        bar.style.width = progress + '%';
      });
    </script>
  </body>
</html>