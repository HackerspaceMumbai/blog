---
// Monitoring Dashboard Page
// Provides a simple interface to view monitoring data and performance metrics

import Layout from '../components/Layout.astro';
---

<Layout 
  title="Monitoring Dashboard - Hackerspace Mumbai"
  description="Real-time monitoring dashboard for website performance and analytics"
  noindex={true}
>
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto">
      <!-- Dashboard Header -->
      <div class="mb-8">
        <h1 class="text-4xl font-bold mb-4">Monitoring Dashboard</h1>
        <p class="text-lg opacity-80">Real-time website performance and analytics monitoring</p>
      </div>
      
      <!-- Quick Stats -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="card bg-base-200 shadow-xl">
          <div class="card-body">
            <h2 class="card-title text-sm">Performance Score</h2>
            <div class="text-3xl font-bold" id="performance-score">-</div>
            <div class="text-sm opacity-60">Current session</div>
          </div>
        </div>
        
        <div class="card bg-base-200 shadow-xl">
          <div class="card-body">
            <h2 class="card-title text-sm">Error Count</h2>
            <div class="text-3xl font-bold" id="error-count">-</div>
            <div class="text-sm opacity-60">This session</div>
          </div>
        </div>
        
        <div class="card bg-base-200 shadow-xl">
          <div class="card-body">
            <h2 class="card-title text-sm">Page Views</h2>
            <div class="text-3xl font-bold" id="page-views">-</div>
            <div class="text-sm opacity-60">This session</div>
          </div>
        </div>
        
        <div class="card bg-base-200 shadow-xl">
          <div class="card-body">
            <h2 class="card-title text-sm">Health Status</h2>
            <div class="text-2xl font-bold" id="health-status">-</div>
            <div class="text-sm opacity-60">Current</div>
          </div>
        </div>
      </div>
      
      <!-- Core Web Vitals -->
      <div class="card bg-base-200 shadow-xl mb-8">
        <div class="card-body">
          <h2 class="card-title mb-4">Core Web Vitals</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <div class="text-center">
              <div class="text-sm font-medium mb-2">LCP</div>
              <div class="text-2xl font-bold" id="lcp-metric">-</div>
              <div class="text-xs opacity-60">Largest Contentful Paint</div>
            </div>
            <div class="text-center">
              <div class="text-sm font-medium mb-2">FID</div>
              <div class="text-2xl font-bold" id="fid-metric">-</div>
              <div class="text-xs opacity-60">First Input Delay</div>
            </div>
            <div class="text-center">
              <div class="text-sm font-medium mb-2">CLS</div>
              <div class="text-2xl font-bold" id="cls-metric">-</div>
              <div class="text-xs opacity-60">Cumulative Layout Shift</div>
            </div>
            <div class="text-center">
              <div class="text-sm font-medium mb-2">FCP</div>
              <div class="text-2xl font-bold" id="fcp-metric">-</div>
              <div class="text-xs opacity-60">First Contentful Paint</div>
            </div>
            <div class="text-center">
              <div class="text-sm font-medium mb-2">TTFB</div>
              <div class="text-2xl font-bold" id="ttfb-metric">-</div>
              <div class="text-xs opacity-60">Time to First Byte</div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Recent Errors -->
      <div class="card bg-base-200 shadow-xl mb-8">
        <div class="card-body">
          <h2 class="card-title mb-4">Recent Errors</h2>
          <div id="recent-errors" class="space-y-2">
            <div class="text-center py-8 opacity-60">
              No errors to display
            </div>
          </div>
        </div>
      </div>
      
      <!-- Performance Alerts -->
      <div class="card bg-base-200 shadow-xl mb-8">
        <div class="card-body">
          <h2 class="card-title mb-4">Performance Alerts</h2>
          <div id="performance-alerts" class="space-y-2">
            <div class="text-center py-8 opacity-60">
              No alerts to display
            </div>
          </div>
        </div>
      </div>
      
      <!-- Monitoring Reports -->
      <div class="card bg-base-200 shadow-xl mb-8">
        <div class="card-body">
          <div class="flex justify-between items-center mb-4">
            <h2 class="card-title">Monitoring Reports</h2>
            <div class="space-x-2">
              <button class="btn btn-sm btn-primary" onclick="refreshDashboard()">
                Refresh
              </button>
              <button class="btn btn-sm btn-outline" onclick="downloadReport()">
                Download
              </button>
              <button class="btn btn-sm btn-error" onclick="clearData()">
                Clear Data
              </button>
            </div>
          </div>
          <div id="monitoring-reports" class="overflow-x-auto">
            <div class="text-center py-8 opacity-60">
              Loading reports...
            </div>
          </div>
        </div>
      </div>
      
      <!-- Debug Information -->
      <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
          <h2 class="card-title mb-4">Debug Information</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 class="font-semibold mb-2">Browser Info</h3>
              <div class="text-sm space-y-1">
                <div>User Agent: <span id="user-agent" class="font-mono text-xs">-</span></div>
                <div>Viewport: <span id="viewport">-</span></div>
                <div>Connection: <span id="connection">-</span></div>
              </div>
            </div>
            <div>
              <h3 class="font-semibold mb-2">Session Info</h3>
              <div class="text-sm space-y-1">
                <div>Session Start: <span id="session-start">-</span></div>
                <div>Current URL: <span id="current-url" class="font-mono text-xs">-</span></div>
                <div>Referrer: <span id="referrer" class="font-mono text-xs">-</span></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Dashboard functionality
  let dashboardData = {};
  
  // Initialize dashboard
  function initDashboard() {
    updateBasicInfo();
    refreshDashboard();
    
    // Auto-refresh every 30 seconds
    setInterval(refreshDashboard, 30000);
    
    console.log('ðŸ“Š Monitoring Dashboard initialized');
  }
  
  // Update basic browser/session info
  function updateBasicInfo() {
    document.getElementById('user-agent').textContent = navigator.userAgent;
    document.getElementById('viewport').textContent = `${window.innerWidth}x${window.innerHeight}`;
    document.getElementById('current-url').textContent = window.location.href;
    document.getElementById('referrer').textContent = document.referrer || 'Direct';
    document.getElementById('session-start').textContent = new Date().toLocaleString();
    
    // Connection info
    if ('connection' in navigator) {
      const conn = navigator.connection;
      document.getElementById('connection').textContent = 
        `${conn.effectiveType || 'unknown'} (${conn.downlink || 'unknown'}Mbps)`;
    } else {
      document.getElementById('connection').textContent = 'Unknown';
    }
  }
  
  // Refresh dashboard data
  function refreshDashboard() {
    // Get monitoring report if available
    if (typeof window.getMonitoringReport === 'function') {
      dashboardData = window.getMonitoringReport();
      updateDashboard(dashboardData);
    } else {
      console.warn('Monitoring system not available');
    }
  }
  
  // Update dashboard with new data
  function updateDashboard(data) {
    // Update quick stats
    document.getElementById('performance-score').textContent = 
      data.performance?.score || '-';
    document.getElementById('error-count').textContent = 
      data.errors?.count || '0';
    document.getElementById('page-views').textContent = 
      data.analytics?.pageViews || '1';
    
    // Update health status
    const healthElement = document.getElementById('health-status');
    const healthStatus = data.health?.status || 'unknown';
    healthElement.textContent = healthStatus.charAt(0).toUpperCase() + healthStatus.slice(1);
    healthElement.className = `text-2xl font-bold ${getHealthColor(healthStatus)}`;
    
    // Update Core Web Vitals
    updateMetric('lcp-metric', data.performance?.metrics?.LCP, 'ms');
    updateMetric('fid-metric', data.performance?.metrics?.FID, 'ms');
    updateMetric('cls-metric', data.performance?.metrics?.CLS, '', 3);
    updateMetric('fcp-metric', data.performance?.metrics?.FCP, 'ms');
    updateMetric('ttfb-metric', data.performance?.metrics?.TTFB, 'ms');
    
    // Update recent errors
    updateRecentErrors(data.errors?.recent || []);
    
    // Update performance alerts
    updatePerformanceAlerts(data.performance?.alerts || []);
    
    // Update monitoring reports
    updateMonitoringReports();
  }
  
  // Update individual metric
  function updateMetric(elementId, value, unit = '', decimals = 0) {
    const element = document.getElementById(elementId);
    if (value !== undefined && value !== null) {
      const displayValue = decimals > 0 ? value.toFixed(decimals) : Math.round(value);
      element.textContent = `${displayValue}${unit}`;
      element.className = `text-2xl font-bold ${getMetricColor(elementId, value)}`;
    } else {
      element.textContent = '-';
      element.className = 'text-2xl font-bold';
    }
  }
  
  // Get health status color
  function getHealthColor(status) {
    switch(status) {
      case 'healthy': return 'text-success';
      case 'warning': return 'text-warning';
      case 'critical': return 'text-error';
      default: return '';
    }
  }
  
  // Get metric color based on thresholds
  function getMetricColor(metricId, value) {
    switch(metricId) {
      case 'lcp-metric':
        return value <= 2500 ? 'text-success' : value <= 4000 ? 'text-warning' : 'text-error';
      case 'fid-metric':
        return value <= 100 ? 'text-success' : value <= 300 ? 'text-warning' : 'text-error';
      case 'cls-metric':
        return value <= 0.1 ? 'text-success' : value <= 0.25 ? 'text-warning' : 'text-error';
      case 'fcp-metric':
        return value <= 1800 ? 'text-success' : value <= 3000 ? 'text-warning' : 'text-error';
      case 'ttfb-metric':
        return value <= 800 ? 'text-success' : value <= 1800 ? 'text-warning' : 'text-error';
      default:
        return '';
    }
  }
  
  // Update recent errors display
  function updateRecentErrors(errors) {
    const container = document.getElementById('recent-errors');
    
    if (errors.length === 0) {
      container.innerHTML = '<div class="text-center py-8 opacity-60">No errors to display</div>';
      return;
    }
    
    container.innerHTML = errors.map(error => `
      <div class="alert alert-error">
        <div>
          <h3 class="font-bold">${error.message || 'Unknown Error'}</h3>
          <div class="text-xs opacity-70">
            ${new Date(error.timestamp).toLocaleString()} - ${error.url || 'Unknown URL'}
          </div>
        </div>
      </div>
    `).join('');
  }
  
  // Update performance alerts display
  function updatePerformanceAlerts(alerts) {
    const container = document.getElementById('performance-alerts');
    
    if (alerts.length === 0) {
      container.innerHTML = '<div class="text-center py-8 opacity-60">No alerts to display</div>';
      return;
    }
    
    container.innerHTML = alerts.map(alert => `
      <div class="alert alert-warning">
        <div>
          <h3 class="font-bold">${alert.message}</h3>
          <div class="text-xs opacity-70">
            ${new Date(alert.timestamp).toLocaleString()}
          </div>
        </div>
      </div>
    `).join('');
  }
  
  // Update monitoring reports table
  function updateMonitoringReports() {
    const container = document.getElementById('monitoring-reports');
    
    let reports = [];
    if (typeof window.getStoredReports === 'function') {
      reports = window.getStoredReports();
    }
    
    if (reports.length === 0) {
      container.innerHTML = '<div class="text-center py-8 opacity-60">No reports available</div>';
      return;
    }
    
    const tableHTML = `
      <table class="table table-zebra w-full">
        <thead>
          <tr>
            <th>Timestamp</th>
            <th>Performance Score</th>
            <th>Errors</th>
            <th>Health Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          ${reports.slice(-10).reverse().map((report, index) => `
            <tr>
              <td class="text-xs">${new Date(report.timestamp).toLocaleString()}</td>
              <td>
                <span class="badge ${getScoreBadgeClass(report.performance?.score)}">
                  ${report.performance?.score || '-'}
                </span>
              </td>
              <td>${report.errors?.count || 0}</td>
              <td>
                <span class="badge ${getHealthBadgeClass(report.health?.status)}">
                  ${report.health?.status || 'unknown'}
                </span>
              </td>
              <td>
                <button class="btn btn-xs btn-outline" onclick="viewReport(${index})">
                  View
                </button>
              </td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    `;
    
    container.innerHTML = tableHTML;
  }
  
  // Get score badge class
  function getScoreBadgeClass(score) {
    if (score >= 80) return 'badge-success';
    if (score >= 50) return 'badge-warning';
    return 'badge-error';
  }
  
  // Get health badge class
  function getHealthBadgeClass(status) {
    switch(status) {
      case 'healthy': return 'badge-success';
      case 'warning': return 'badge-warning';
      case 'critical': return 'badge-error';
      default: return 'badge-ghost';
    }
  }
  
  // View detailed report
  function viewReport(index) {
    const reports = window.getStoredReports?.() || [];
    const report = reports[reports.length - 1 - index];
    
    if (report) {
      const popup = window.open('', '_blank', 'width=800,height=600');
      popup.document.write(`
        <html>
          <head>
            <title>Monitoring Report - ${new Date(report.timestamp).toLocaleString()}</title>
            <style>
              body { font-family: monospace; padding: 20px; background: #1a1a1a; color: #fff; }
              pre { background: #2a2a2a; padding: 15px; border-radius: 5px; overflow: auto; }
            </style>
          </head>
          <body>
            <h1>Monitoring Report</h1>
            <p><strong>Timestamp:</strong> ${new Date(report.timestamp).toLocaleString()}</p>
            <p><strong>URL:</strong> ${report.url}</p>
            <pre>${JSON.stringify(report, null, 2)}</pre>
          </body>
        </html>
      `);
    }
  }
  
  // Download report as JSON
  function downloadReport() {
    const report = dashboardData;
    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `monitoring-report-${new Date().toISOString().slice(0, 19)}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
  
  // Clear monitoring data
  function clearData() {
    if (confirm('Are you sure you want to clear all monitoring data?')) {
      if (typeof window.clearMonitoringData === 'function') {
        window.clearMonitoringData();
        refreshDashboard();
        alert('Monitoring data cleared successfully');
      }
    }
  }
  
  // Initialize dashboard when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initDashboard);
  } else {
    initDashboard();
  }
</script>