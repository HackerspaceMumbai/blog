---
import CTAButton from './CTAButton.astro';

export interface Props {
  formId?: string;
  placeholder?: string;
  buttonText?: string;
  className?: string;
}

const { 
  formId = 'newsletter-form',
  placeholder = 'Enter your email address',
  buttonText = 'Subscribe',
  className = ''
} = Astro.props;
---

<form 
  id={formId}
  class={`newsletter-form flex flex-col gap-4 justify-center max-w-2xl mx-auto ${className}`}
  novalidate
  aria-label="Newsletter subscription form"
>
  <!-- Form Fields Container -->
  <div class="flex flex-col md:flex-row gap-4 mb-4">
    <!-- First Name Input Container (Optional) -->
    <div class="form-control flex-1 relative">
      <label for="newsletter-first-name" class="sr-only">
        First name (optional)
      </label>
      <div class="relative">
        <!-- Name Icon -->
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg 
            class="h-5 w-5 text-base-content/60" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
            />
          </svg>
        </div>
        
        <!-- First Name Input -->
        <input 
          type="text" 
          id="newsletter-first-name"
          name="firstName"
          placeholder="First name (optional)"
          class="input input-bordered w-full pl-10 pr-4 py-3 text-base transition-all duration-200 focus:ring-2 focus:ring-primary/20 focus:border-primary"
          aria-describedby="name-help"
          autocomplete="given-name"
          spellcheck="false"
          data-testid="newsletter-first-name-input"
          maxlength="50"
        />
      </div>
    </div>

    <!-- Email Input Container -->
    <div class="form-control flex-1 relative">
      <label for="newsletter-email" class="sr-only">
        Email address (required)
      </label>
      <div class="relative">
        <!-- Email Icon -->
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg 
            class="h-5 w-5 text-base-content/60" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
            />
          </svg>
        </div>
        
        <!-- Email Input -->
        <input 
          type="email" 
          id="newsletter-email"
          name="email"
          placeholder={placeholder}
          class="input input-bordered input-primary w-full pl-10 pr-4 py-3 text-base transition-all duration-200 focus:ring-2 focus:ring-primary/20 focus:border-primary"
          required
          aria-required="true"
          aria-describedby="email-error email-help"
          autocomplete="email"
          spellcheck="false"
          data-testid="newsletter-email-input"
        />
      </div>
    </div>
  </div>

  <!-- Help Text -->
  <div class="flex flex-col sm:flex-row gap-2 text-sm text-base-content/70 mb-2 px-1">
    <div id="name-help">
      First name helps us personalize your emails.
    </div>
    <div class="hidden sm:block">â€¢</div>
    <div id="email-help">
      We'll never share your information with anyone else.
    </div>
  </div>
  
  <!-- Error Message Container -->
  <div 
    id="email-error" 
    class="error-message text-sm text-error mt-1 px-1 hidden"
    role="alert"
    aria-live="polite"
    data-testid="email-error-message"
  >
    <!-- Error text will be inserted here by JavaScript -->
  </div>

  <!-- Submit Button -->
  <div class="form-control">
    <CTAButton 
      type="submit" 
      variant="primary" 
      size="lg"
      loading={false}
      disabled={false}
      aria-describedby="submit-status"
      data-testid="newsletter-submit-button"
    >
      <span class="submit-text">{buttonText}</span>
    </CTAButton>
    
    <!-- Submit Status (for screen readers) -->
    <div 
      id="submit-status" 
      class="sr-only" 
      aria-live="polite" 
      aria-atomic="true"
      data-testid="submit-status"
    >
      <!-- Status updates will be announced here -->
    </div>
  </div>

  <!-- Success Message Container -->
  <div 
    class="success-message w-full text-center mt-4 p-4 bg-success/10 text-success rounded-lg border border-success/20 hidden"
    role="alert"
    aria-live="polite"
    data-testid="success-message"
  >
    <div class="flex items-center justify-center gap-2">
      <svg 
        class="h-5 w-5 text-success" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width="2" 
          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
      <span class="font-medium">Success!</span>
    </div>
    <p class="mt-1 text-sm">
      Thank you for subscribing! Please check your email to confirm your subscription.
    </p>
  </div>

  <!-- General Error Message Container -->
  <div 
    class="general-error w-full text-center mt-4 p-4 bg-error/10 text-error rounded-lg border border-error/20 hidden"
    role="alert"
    aria-live="polite"
    data-testid="general-error-message"
  >
    <div class="flex items-center justify-center gap-2">
      <svg 
        class="h-5 w-5 text-error flex-shrink-0" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width="2" 
          d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
      <span class="font-medium">Unable to Subscribe</span>
    </div>
    <p class="error-text mt-2 text-sm leading-relaxed">
      <!-- Error message will be inserted here -->
    </p>
    <div class="mt-3 flex flex-col sm:flex-row gap-2 justify-center items-center text-xs text-error/80">
      <span>Having trouble?</span>
      <a 
        href="mailto:hello@hackmum.in?subject=Newsletter Subscription Issue" 
        class="underline hover:no-underline font-medium"
      >
        Contact us directly
      </a>
    </div>
  </div>

  <!-- Network Error Message (Special case) -->
  <div 
    class="network-error w-full text-center mt-4 p-4 bg-warning/10 text-warning rounded-lg border border-warning/20 hidden"
    role="alert"
    aria-live="polite"
    data-testid="network-error-message"
  >
    <div class="flex items-center justify-center gap-2">
      <svg 
        class="h-5 w-5 text-warning flex-shrink-0" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width="2" 
          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
        />
      </svg>
      <span class="font-medium">Connection Issue</span>
    </div>
    <p class="mt-2 text-sm leading-relaxed">
      We're having trouble connecting to our newsletter service. Please check your internet connection and try again.
    </p>
    <div class="mt-3">
      <button 
        type="button" 
        class="retry-button text-xs bg-warning/20 hover:bg-warning/30 px-3 py-1 rounded-full transition-colors duration-200"
        onclick="location.reload()"
      >
        Retry Connection
      </button>
    </div>
  </div>
</form>

<!-- Client-side Form Handling Script -->
<script>
  interface NewsletterFormState {
    email: string;
    firstName: string;
    isLoading: boolean;
    error: string | null;
    success: boolean;
    isSubmitting: boolean;
  }

  interface ValidationResult {
    isValid: boolean;
    error?: string;
  }

  interface APIResponse {
    success: boolean;
    message?: string;
    error?: string;
    data?: any;
  }

  class NewsletterFormHandler {
    private form: HTMLFormElement;
    private emailInput: HTMLInputElement;
    private firstNameInput: HTMLInputElement;
    private submitButton: HTMLButtonElement;
    private submitText: HTMLElement;
    private emailError: HTMLElement;
    private successMessage: HTMLElement;
    private generalError: HTMLElement;
    private submitStatus: HTMLElement;
    private state: NewsletterFormState;

    // Rate limiting
    private lastSubmitTime: number = 0;
    private submitAttempts: number = 0;
    private readonly RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute
    private readonly MAX_ATTEMPTS = 3;

    // Error messages
    private readonly ERROR_MESSAGES = {
      INVALID_EMAIL: 'Please enter a valid email address',
      REQUIRED_EMAIL: 'Email address is required',
      ALREADY_SUBSCRIBED: 'This email is already subscribed to our newsletter',
      NETWORK_ERROR: 'Connection error. Please try again.',
      SERVER_ERROR: 'Something went wrong. Please try again later.',
      RATE_LIMITED: 'Too many attempts. Please wait a moment before trying again.',
      GENERIC_ERROR: 'An error occurred. Please try again.'
    };

    constructor(formElement: HTMLFormElement) {
      this.form = formElement;
      this.emailInput = formElement.querySelector('#newsletter-email') as HTMLInputElement;
      this.firstNameInput = formElement.querySelector('#newsletter-first-name') as HTMLInputElement;
      this.submitButton = formElement.querySelector('button[type="submit"]') as HTMLButtonElement;
      this.submitText = formElement.querySelector('.submit-text') as HTMLElement;
      this.emailError = formElement.querySelector('#email-error') as HTMLElement;
      this.successMessage = formElement.querySelector('.success-message') as HTMLElement;
      this.generalError = formElement.querySelector('.general-error') as HTMLElement;
      this.submitStatus = formElement.querySelector('#submit-status') as HTMLElement;

      this.state = {
        email: '',
        firstName: '',
        isLoading: false,
        error: null,
        success: false,
        isSubmitting: false
      };

      this.init();
    }

    private init(): void {
      this.attachEventListeners();
      this.setupAccessibility();
    }

    private attachEventListeners(): void {
      // Form submission
      this.form.addEventListener('submit', this.handleSubmit.bind(this));
      
      // Real-time email validation
      this.emailInput.addEventListener('input', this.handleEmailInput.bind(this));
      this.emailInput.addEventListener('blur', this.handleEmailBlur.bind(this));
      
      // First name input handling
      this.firstNameInput.addEventListener('input', this.handleFirstNameInput.bind(this));
      
      // Clear errors on focus
      this.emailInput.addEventListener('focus', this.clearEmailError.bind(this));
    }

    private setupAccessibility(): void {
      // Ensure proper ARIA relationships
      this.emailInput.setAttribute('aria-describedby', 'email-error email-help');
      this.submitButton.setAttribute('aria-describedby', 'submit-status');
    }

    private handleEmailInput(event: Event): void {
      const target = event.target as HTMLInputElement;
      this.state.email = target.value.trim();
      
      // Clear previous errors on input
      if (this.state.error && this.emailError.textContent) {
        this.clearEmailError();
      }
    }

    private handleFirstNameInput(event: Event): void {
      const target = event.target as HTMLInputElement;
      this.state.firstName = target.value.trim();
    }

    private handleEmailBlur(event: Event): void {
      const target = event.target as HTMLInputElement;
      const email = target.value.trim();
      
      if (email && !this.validateEmail(email).isValid) {
        this.showEmailError(this.ERROR_MESSAGES.INVALID_EMAIL);
      }
    }

    private async handleSubmit(event: Event): Promise<void> {
      event.preventDefault();
      
      // Check rate limiting
      if (!this.checkRateLimit()) {
        this.showGeneralError(this.ERROR_MESSAGES.RATE_LIMITED);
        return;
      }

      const email = this.emailInput.value.trim();
      const firstName = this.firstNameInput.value.trim();
      
      // Validate email
      const validation = this.validateEmail(email);
      if (!validation.isValid) {
        this.showEmailError(validation.error || this.ERROR_MESSAGES.INVALID_EMAIL);
        this.emailInput.focus();
        return;
      }

      // Clear any previous messages
      this.clearMessages();
      
      // Set loading state
      this.setLoadingState(true);
      
      try {
        const response = await this.submitToAPI(email, firstName);
        
        if (response.success) {
          this.handleSuccess(response.message);
        } else {
          this.handleError(response.error || this.ERROR_MESSAGES.GENERIC_ERROR);
        }
      } catch (error) {
        console.error('Newsletter subscription error:', error);
        
        // Determine error type for better UX
        if (error instanceof TypeError && error.message.includes('fetch')) {
          this.handleError(this.ERROR_MESSAGES.NETWORK_ERROR);
        } else {
          this.handleError(this.ERROR_MESSAGES.GENERIC_ERROR);
        }
      } finally {
        this.setLoadingState(false);
      }
    }

    private validateEmail(email: string): ValidationResult {
      if (!email) {
        return { isValid: false, error: this.ERROR_MESSAGES.REQUIRED_EMAIL };
      }

      // Email format validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return { isValid: false, error: this.ERROR_MESSAGES.INVALID_EMAIL };
      }

      // Length validation
      if (email.length > 254) {
        return { isValid: false, error: this.ERROR_MESSAGES.INVALID_EMAIL };
      }

      return { isValid: true };
    }

    private checkRateLimit(): boolean {
      const now = Date.now();
      
      // Reset attempts if window has passed
      if (now - this.lastSubmitTime > this.RATE_LIMIT_WINDOW) {
        this.submitAttempts = 0;
      }
      
      // Check if too many attempts
      if (this.submitAttempts >= this.MAX_ATTEMPTS) {
        return false;
      }
      
      this.submitAttempts++;
      this.lastSubmitTime = now;
      return true;
    }

    private async submitToAPI(email: string, firstName: string = ''): Promise<APIResponse> {
      const response = await fetch('/.netlify/functions/newsletter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          email: email.toLowerCase(),
          firstName: firstName,
          source: 'website_newsletter',
          timestamp: new Date().toISOString()
        }),
      });

      if (!response.ok) {
        // Handle specific HTTP status codes
        switch (response.status) {
          case 409:
            throw new Error(this.ERROR_MESSAGES.ALREADY_SUBSCRIBED);
          case 422:
            throw new Error(this.ERROR_MESSAGES.INVALID_EMAIL);
          case 429:
            throw new Error(this.ERROR_MESSAGES.RATE_LIMITED);
          case 500:
          case 502:
          case 503:
            throw new Error(this.ERROR_MESSAGES.SERVER_ERROR);
          default:
            throw new Error(this.ERROR_MESSAGES.NETWORK_ERROR);
        }
      }

      return await response.json();
    }

    private setLoadingState(isLoading: boolean): void {
      this.state.isLoading = isLoading;
      this.state.isSubmitting = isLoading;
      
      // Update button state
      this.submitButton.disabled = isLoading;
      this.submitButton.setAttribute('aria-disabled', isLoading.toString());
      
      if (isLoading) {
        this.submitButton.classList.add('loading');
        this.submitText.textContent = 'Subscribing...';
        this.announceToScreenReader('Submitting subscription...');
      } else {
        this.submitButton.classList.remove('loading');
        this.submitText.textContent = 'Subscribe';
      }
      
      // Disable form during submission
      this.emailInput.disabled = isLoading;
      this.firstNameInput.disabled = isLoading;
    }

    private handleSuccess(message?: string): void {
      this.state.success = true;
      this.state.error = null;
      
      // Personalize success message if first name was provided
      const successText = this.successMessage.querySelector('p') as HTMLElement;
      if (this.state.firstName) {
        successText.textContent = `Thanks ${this.state.firstName}! Please check your email to confirm your subscription.`;
      } else {
        successText.textContent = 'Thank you for subscribing! Please check your email to confirm your subscription.';
      }
      
      // Show success message
      this.successMessage.classList.remove('hidden');
      
      // Reset form
      this.form.reset();
      this.state.email = '';
      this.state.firstName = '';
      
      // Announce success to screen readers
      const announcement = this.state.firstName 
        ? `Thanks ${this.state.firstName}! Successfully subscribed to newsletter. Please check your email to confirm.`
        : 'Successfully subscribed to newsletter! Please check your email to confirm.';
      this.announceToScreenReader(announcement);
      
      // Focus management - move focus to success message for screen readers
      this.successMessage.setAttribute('tabindex', '-1');
      this.successMessage.focus();
      
      // Auto-hide success message after 10 seconds
      setTimeout(() => {
        this.successMessage.classList.add('hidden');
        this.successMessage.removeAttribute('tabindex');
      }, 10000);
    }

    private handleError(errorMessage: string): void {
      this.state.error = errorMessage;
      this.state.success = false;
      
      // Determine if it's a field-specific error or general error
      if (errorMessage === this.ERROR_MESSAGES.INVALID_EMAIL || 
          errorMessage === this.ERROR_MESSAGES.REQUIRED_EMAIL) {
        this.showEmailError(errorMessage);
        this.emailInput.focus();
      } else if (errorMessage === this.ERROR_MESSAGES.NETWORK_ERROR) {
        this.showNetworkError();
      } else {
        this.showGeneralError(errorMessage);
      }
    }

    private showEmailError(message: string): void {
      this.emailError.textContent = message;
      this.emailError.classList.remove('hidden');
      this.emailInput.setAttribute('aria-invalid', 'true');
      this.emailInput.classList.add('input-error');
      
      // Announce error to screen readers
      this.announceToScreenReader(`Email error: ${message}`);
    }

    private clearEmailError(): void {
      this.emailError.textContent = '';
      this.emailError.classList.add('hidden');
      this.emailInput.setAttribute('aria-invalid', 'false');
      this.emailInput.classList.remove('input-error');
    }

    private showGeneralError(message: string): void {
      const errorText = this.generalError.querySelector('.error-text') as HTMLElement;
      
      // Provide user-friendly error messages
      const friendlyMessage = this.getFriendlyErrorMessage(message);
      errorText.textContent = friendlyMessage;
      
      this.generalError.classList.remove('hidden');
      this.hideNetworkError(); // Hide network error if showing
      
      // Announce error to screen readers
      this.announceToScreenReader(`Error: ${friendlyMessage}`);
      
      // Focus management
      this.generalError.setAttribute('tabindex', '-1');
      this.generalError.focus();
    }

    private showNetworkError(): void {
      const networkError = this.form.querySelector('.network-error') as HTMLElement;
      if (networkError) {
        networkError.classList.remove('hidden');
        this.generalError.classList.add('hidden'); // Hide general error
        
        // Announce to screen readers
        this.announceToScreenReader('Connection issue: Please check your internet connection and try again');
        
        // Focus management
        networkError.setAttribute('tabindex', '-1');
        networkError.focus();
      }
    }

    private hideNetworkError(): void {
      const networkError = this.form.querySelector('.network-error') as HTMLElement;
      if (networkError) {
        networkError.classList.add('hidden');
        networkError.removeAttribute('tabindex');
      }
    }

    private getFriendlyErrorMessage(originalMessage: string): string {
      // Map technical errors to user-friendly messages
      const errorMap: Record<string, string> = {
        [this.ERROR_MESSAGES.ALREADY_SUBSCRIBED]: "You're already subscribed! Check your email for our latest updates.",
        [this.ERROR_MESSAGES.SERVER_ERROR]: "Our newsletter service is temporarily unavailable. Please try again in a few minutes.",
        [this.ERROR_MESSAGES.RATE_LIMITED]: "You've tried subscribing several times recently. Please wait a moment before trying again.",
        [this.ERROR_MESSAGES.GENERIC_ERROR]: "Something went wrong while processing your subscription. Please try again."
      };

      return errorMap[originalMessage] || originalMessage;
    }

    private clearMessages(): void {
      this.clearEmailError();
      this.successMessage.classList.add('hidden');
      this.generalError.classList.add('hidden');
      this.hideNetworkError();
      this.successMessage.removeAttribute('tabindex');
      this.generalError.removeAttribute('tabindex');
    }

    private announceToScreenReader(message: string): void {
      this.submitStatus.textContent = message;
      
      // Clear the announcement after a short delay to allow for re-announcements
      setTimeout(() => {
        this.submitStatus.textContent = '';
      }, 1000);
    }
  }

  // Initialize form handlers when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const newsletterForms = document.querySelectorAll('.newsletter-form') as NodeListOf<HTMLFormElement>;
    
    newsletterForms.forEach(form => {
      new NewsletterFormHandler(form);
    });
  });

  // Handle dynamic form loading (if forms are added after page load)
  if (typeof window !== 'undefined') {
    (window as any).initNewsletterForm = (formElement: HTMLFormElement) => {
      new NewsletterFormHandler(formElement);
    };
  }
</script>

<style>
  /* Enhanced form styling */
  .newsletter-form {
    --transition-duration: 200ms;
  }

  .newsletter-form .input {
    transition: all var(--transition-duration) ease-in-out;
  }

  .newsletter-form .input:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .newsletter-form .input-error {
    border-color: hsl(var(--er));
    box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.1);
  }

  .newsletter-form .error-message {
    animation: slideDown 0.2s ease-out;
  }

  .newsletter-form .success-message,
  .newsletter-form .general-error,
  .newsletter-form .network-error {
    animation: slideDown 0.3s ease-out;
  }

  /* Professional error state styling */
  .newsletter-form .general-error,
  .newsletter-form .network-error {
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
  }

  .newsletter-form .general-error .error-text,
  .newsletter-form .network-error p {
    max-width: 400px;
    margin: 0 auto;
  }

  /* Retry button styling */
  .newsletter-form .retry-button {
    font-weight: 500;
    transition: all 0.2s ease-in-out;
  }

  .newsletter-form .retry-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Loading state enhancements */
  .newsletter-form .btn.loading {
    pointer-events: none;
  }

  .newsletter-form .btn.loading .submit-text {
    opacity: 0.7;
  }

  /* Focus management */
  .newsletter-form [tabindex="-1"]:focus {
    outline: 2px solid hsl(var(--p));
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .newsletter-form .input {
      border-width: 2px;
    }
    
    .newsletter-form .input:focus {
      border-width: 3px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .newsletter-form .input,
    .newsletter-form .error-message,
    .newsletter-form .success-message,
    .newsletter-form .general-error {
      transition: none;
      animation: none;
    }
    
    .newsletter-form .input:focus {
      transform: none;
    }
  }

  /* Enhanced form field layout */
  .newsletter-form .form-control {
    position: relative;
  }

  /* Mobile-first responsive design */
  @media (max-width: 768px) {
    .newsletter-form .flex.md\:flex-row {
      flex-direction: column;
    }
    
    .newsletter-form .gap-4 {
      gap: 1rem;
    }
    
    /* Ensure inputs are full width on mobile */
    .newsletter-form .form-control {
      width: 100%;
    }
  }

  /* Enhanced input styling */
  .newsletter-form input[type="text"],
  .newsletter-form input[type="email"] {
    transition: all var(--duration-fast) var(--ease-out);
  }

  .newsletter-form input[type="text"]:focus,
  .newsletter-form input[type="email"]:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1), 0 0 0 2px rgba(255, 193, 7, 0.2);
  }
</style>