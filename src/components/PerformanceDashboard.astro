---
// Performance dashboard component for monitoring Core Web Vitals and other metrics
// Provides real-time performance insights and alerts

export interface Props {
  enableInDevelopment?: boolean;
  enableInProduction?: boolean;
  showVisualIndicator?: boolean;
  enableAlerts?: boolean;
  alertThresholds?: {
    lcp: number;
    fid: number;
    cls: number;
    ttfb: number;
  };
}

const {
  enableInDevelopment = true,
  enableInProduction = false,
  showVisualIndicator = true,
  enableAlerts = true,
  alertThresholds = {
    lcp: 2500,  // Large Contentful Paint (ms)
    fid: 100,   // First Input Delay (ms)
    cls: 0.1,   // Cumulative Layout Shift
    ttfb: 800   // Time to First Byte (ms)
  }
} = Astro.props;

const shouldEnable = (import.meta.env.DEV && enableInDevelopment) || 
                    (import.meta.env.PROD && enableInProduction);
---

{shouldEnable && (
  <Fragment>
    <!-- Performance Dashboard Styles -->
    <style>
      .performance-dashboard {
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 9999;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px;
        border-radius: 8px;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 12px;
        min-width: 200px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
      }
      
      .performance-dashboard.collapsed {
        width: 40px;
        height: 40px;
        padding: 8px;
        cursor: pointer;
      }
      
      .performance-dashboard.collapsed .dashboard-content {
        display: none;
      }
      
      .performance-dashboard.collapsed .toggle-btn {
        transform: rotate(180deg);
      }
      
      .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        padding-bottom: 4px;
      }
      
      .dashboard-title {
        font-weight: bold;
        font-size: 11px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }
      
      .toggle-btn {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 2px;
        border-radius: 2px;
        transition: transform 0.3s ease;
      }
      
      .toggle-btn:hover {
        background: rgba(255, 255, 255, 0.1);
      }
      
      .metric-row {
        display: flex;
        justify-content: space-between;
        margin: 4px 0;
        padding: 2px 0;
      }
      
      .metric-label {
        font-weight: 500;
      }
      
      .metric-value {
        font-weight: bold;
      }
      
      .metric-value.good {
        color: #10b981;
      }
      
      .metric-value.needs-improvement {
        color: #f59e0b;
      }
      
      .metric-value.poor {
        color: #ef4444;
      }
      
      .alert-indicator {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 12px;
        height: 12px;
        background: #ef4444;
        border-radius: 50%;
        animation: pulse 2s infinite;
      }
      
      @keyframes pulse {
        0% {
          transform: scale(0.95);
          box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
        }
        
        70% {
          transform: scale(1);
          box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
        }
        
        100% {
          transform: scale(0.95);
          box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
        }
      }
      
      .performance-chart {
        margin-top: 8px;
        height: 40px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        position: relative;
        overflow: hidden;
      }
      
      .chart-bar {
        position: absolute;
        bottom: 0;
        width: 2px;
        background: #10b981;
        transition: height 0.3s ease;
      }
    </style>
    
    <!-- Performance Dashboard HTML -->
    <div id="performance-dashboard" class="performance-dashboard" style="display: none;">
      <div class="dashboard-header">
        <div class="dashboard-title">Performance</div>
        <button class="toggle-btn" onclick="window.performanceDashboard.toggle()">
          <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
            <path d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"/>
          </svg>
        </button>
      </div>
      
      <div class="dashboard-content">
        <div class="metric-row">
          <span class="metric-label">LCP:</span>
          <span id="lcp-value" class="metric-value">-</span>
        </div>
        <div class="metric-row">
          <span class="metric-label">FID:</span>
          <span id="fid-value" class="metric-value">-</span>
        </div>
        <div class="metric-row">
          <span class="metric-label">CLS:</span>
          <span id="cls-value" class="metric-value">-</span>
        </div>
        <div class="metric-row">
          <span class="metric-label">TTFB:</span>
          <span id="ttfb-value" class="metric-value">-</span>
        </div>
        <div class="metric-row">
          <span class="metric-label">FCP:</span>
          <span id="fcp-value" class="metric-value">-</span>
        </div>
        
        <div class="performance-chart" id="performance-chart"></div>
      </div>
      
      <div id="alert-indicator" class="alert-indicator" style="display: none;"></div>
    </div>
    
    <!-- Performance Dashboard Script -->
    <script is:inline define:vars={{ 
      showVisualIndicator, 
      enableAlerts, 
      alertThresholds 
    }}>
      // Performance Dashboard
      window.performanceDashboard = {
        metrics: {},
        alerts: [],
        isCollapsed: false,
        chartData: [],
        
        // Initialize dashboard
        init: function() {
          if (!showVisualIndicator) return;
          
          this.setupWebVitals();
          this.setupPerformanceObserver();
          this.setupChart();
          this.show();
          
          console.log('📊 Performance Dashboard initialized');
        },
        
        // Setup Web Vitals monitoring
        setupWebVitals: function() {
          // Load web-vitals library if not already loaded
          if (typeof webVitals === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://unpkg.com/web-vitals@3/dist/web-vitals.iife.js';
            script.onload = () => {
              this.initWebVitals();
            };
            document.head.appendChild(script);
          } else {
            this.initWebVitals();
          }
        },
        
        // Initialize Web Vitals
        initWebVitals: function() {
          if (typeof webVitals === 'undefined') return;
          
          webVitals.getCLS((metric) => this.updateMetric('CLS', metric.value, 0.1, 0.25));
          webVitals.getFID((metric) => this.updateMetric('FID', metric.value, 100, 300));
          webVitals.getFCP((metric) => this.updateMetric('FCP', metric.value, 1800, 3000));
          webVitals.getLCP((metric) => this.updateMetric('LCP', metric.value, 2500, 4000));
          webVitals.getTTFB((metric) => this.updateMetric('TTFB', metric.value, 800, 1800));
        },
        
        // Setup Performance Observer for additional metrics
        setupPerformanceObserver: function() {
          if (!('PerformanceObserver' in window)) return;
          
          try {
            // Monitor navigation timing
            const navObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (entry.entryType === 'navigation') {
                  const ttfb = entry.responseStart - entry.requestStart;
                  this.updateMetric('TTFB', ttfb, alertThresholds.ttfb, alertThresholds.ttfb * 2);
                }
              }
            });
            navObserver.observe({ entryTypes: ['navigation'] });
            
            // Monitor resource timing for slow resources
            const resourceObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (entry.duration > 1000) { // Resources taking more than 1s
                  this.addAlert(`Slow resource: ${entry.name} (${Math.round(entry.duration)}ms)`);
                }
              }
            });
            resourceObserver.observe({ entryTypes: ['resource'] });
            
          } catch (e) {
            console.warn('Performance Observer setup failed:', e);
          }
        },
        
        // Update metric display
        updateMetric: function(name, value, goodThreshold, poorThreshold) {
          this.metrics[name] = value;
          
          const element = document.getElementById(`${name.toLowerCase()}-value`);
          if (!element) return;
          
          let displayValue;
          let className;
          
          if (name === 'CLS') {
            displayValue = value.toFixed(3);
            className = value <= 0.1 ? 'good' : value <= 0.25 ? 'needs-improvement' : 'poor';
          } else {
            displayValue = Math.round(value) + 'ms';
            className = value <= goodThreshold ? 'good' : value <= poorThreshold ? 'needs-improvement' : 'poor';
          }
          
          element.textContent = displayValue;
          element.className = `metric-value ${className}`;
          
          // Check for alerts
          if (enableAlerts && className === 'poor') {
            this.addAlert(`${name} is poor: ${displayValue}`);
          }
          
          // Update chart
          this.updateChart(name, value);
          
          // Send to analytics
          if (typeof window.analytics !== 'undefined') {
            window.analytics.trackPerformance(name, value, { threshold: className });
          }
        },
        
        // Add performance alert
        addAlert: function(message) {
          this.alerts.push({
            message: message,
            timestamp: Date.now()
          });
          
          // Keep only last 10 alerts
          if (this.alerts.length > 10) {
            this.alerts = this.alerts.slice(-10);
          }
          
          // Show alert indicator
          const indicator = document.getElementById('alert-indicator');
          if (indicator) {
            indicator.style.display = 'block';
          }
          
          console.warn('⚠️ Performance Alert:', message);
          
          // Send to error monitoring
          if (typeof window.errorMonitoring !== 'undefined') {
            window.errorMonitoring.logError({
              message: 'Performance Alert',
              alert: message
            }, {
              type: 'performance-alert',
              metric: message
            });
          }
        },
        
        // Setup performance chart
        setupChart: function() {
          this.chartData = new Array(50).fill(0);
        },
        
        // Update performance chart
        updateChart: function(metric, value) {
          // Normalize value for chart (0-100 scale)
          let normalizedValue;
          switch(metric) {
            case 'LCP':
              normalizedValue = Math.min(100, (value / 4000) * 100);
              break;
            case 'FID':
              normalizedValue = Math.min(100, (value / 300) * 100);
              break;
            case 'CLS':
              normalizedValue = Math.min(100, (value / 0.25) * 100);
              break;
            case 'TTFB':
              normalizedValue = Math.min(100, (value / 1800) * 100);
              break;
            case 'FCP':
              normalizedValue = Math.min(100, (value / 3000) * 100);
              break;
            default:
              normalizedValue = 50;
          }
          
          this.chartData.push(normalizedValue);
          this.chartData = this.chartData.slice(-50);
          
          this.renderChart();
        },
        
        // Render performance chart
        renderChart: function() {
          const chart = document.getElementById('performance-chart');
          if (!chart) return;
          
          chart.innerHTML = '';
          
          this.chartData.forEach((value, index) => {
            const bar = document.createElement('div');
            bar.className = 'chart-bar';
            bar.style.left = `${(index / 50) * 100}%`;
            bar.style.height = `${value}%`;
            bar.style.background = value > 80 ? '#ef4444' : value > 50 ? '#f59e0b' : '#10b981';
            chart.appendChild(bar);
          });
        },
        
        // Show dashboard
        show: function() {
          const dashboard = document.getElementById('performance-dashboard');
          if (dashboard) {
            dashboard.style.display = 'block';
          }
        },
        
        // Hide dashboard
        hide: function() {
          const dashboard = document.getElementById('performance-dashboard');
          if (dashboard) {
            dashboard.style.display = 'none';
          }
        },
        
        // Toggle dashboard
        toggle: function() {
          const dashboard = document.getElementById('performance-dashboard');
          if (!dashboard) return;
          
          this.isCollapsed = !this.isCollapsed;
          dashboard.classList.toggle('collapsed', this.isCollapsed);
        },
        
        // Get performance summary
        getSummary: function() {
          return {
            metrics: this.metrics,
            alerts: this.alerts,
            timestamp: new Date().toISOString(),
            url: window.location.href
          };
        },
        
        // Clear alerts
        clearAlerts: function() {
          this.alerts = [];
          const indicator = document.getElementById('alert-indicator');
          if (indicator) {
            indicator.style.display = 'none';
          }
        }
      };
      
      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          window.performanceDashboard.init();
        });
      } else {
        window.performanceDashboard.init();
      }
      
      // Expose to console for debugging
      window.getPerformanceSummary = () => {
        const summary = window.performanceDashboard.getSummary();
        console.table(summary.metrics);
        console.log('Alerts:', summary.alerts);
        return summary;
      };
    </script>
  </Fragment>
)}