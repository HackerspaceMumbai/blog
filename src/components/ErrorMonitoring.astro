---
// Error monitoring and logging component
// Provides comprehensive error tracking and reporting

export interface Props {
  enableInDevelopment?: boolean;
  enableInProduction?: boolean;
  logToConsole?: boolean;
  logToAnalytics?: boolean;
  enableUserFeedback?: boolean;
  maxErrorsPerSession?: number;
}

const {
  enableInDevelopment = true,
  enableInProduction = true,
  logToConsole = true,
  logToAnalytics = true,
  enableUserFeedback = false,
  maxErrorsPerSession = 10
} = Astro.props;

const shouldEnable = (import.meta.env.DEV && enableInDevelopment) || 
                    (import.meta.env.PROD && enableInProduction);
---

{shouldEnable && (
  <script is:inline define:vars={{ 
    logToConsole, 
    logToAnalytics, 
    enableUserFeedback, 
    maxErrorsPerSession 
  }}>
    // Error monitoring system
    window.errorMonitoring = {
      errorCount: 0,
      maxErrors: maxErrorsPerSession,
      errors: [],
      
      // Initialize error monitoring
      init: function() {
        this.setupGlobalErrorHandlers();
        this.setupPerformanceMonitoring();
        this.setupNetworkErrorMonitoring();
        
        if (logToConsole) {
          console.log('🔍 Error Monitoring initialized');
        }
      },
      
      // Log error with context
      logError: function(error, context = {}) {
        if (this.errorCount >= this.maxErrors) {
          return; // Prevent error spam
        }
        
        this.errorCount++;
        
        const errorData = {
          timestamp: new Date().toISOString(),
          message: error.message || String(error),
          stack: error.stack || 'No stack trace available',
          url: window.location.href,
          userAgent: navigator.userAgent,
          viewport: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          ...context
        };
        
        this.errors.push(errorData);
        
        // Log to console if enabled
        if (logToConsole) {
          console.error('🚨 Error logged:', errorData);
        }
        
        // Send to analytics if enabled
        if (logToAnalytics && typeof window.analytics !== 'undefined') {
          window.analytics.trackError(error, context);
        }
        
        // Show user feedback option if enabled
        if (enableUserFeedback && this.errorCount <= 3) {
          this.showErrorFeedback(errorData);
        }
        
        // Store in localStorage for debugging
        try {
          const storedErrors = JSON.parse(localStorage.getItem('errorLog') || '[]');
          storedErrors.push(errorData);
          // Keep only last 50 errors
          const recentErrors = storedErrors.slice(-50);
          localStorage.setItem('errorLog', JSON.stringify(recentErrors));
        } catch (e) {
          // localStorage might be full or unavailable
        }
      },
      
      // Setup global error handlers
      setupGlobalErrorHandlers: function() {
        // JavaScript errors
        window.addEventListener('error', (event) => {
          this.logError(event.error || {
            message: event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno
          }, {
            type: 'javascript-error',
            filename: event.filename,
            line: event.lineno,
            column: event.colno
          });
        });
        
        // Unhandled promise rejections
        window.addEventListener('unhandledrejection', (event) => {
          this.logError({
            message: 'Unhandled Promise Rejection',
            reason: String(event.reason)
          }, {
            type: 'promise-rejection',
            reason: event.reason
          });
        });
        
        // Resource loading errors
        window.addEventListener('error', (event) => {
          if (event.target !== window) {
            this.logError({
              message: 'Resource loading failed',
              resource: event.target.src || event.target.href || 'unknown'
            }, {
              type: 'resource-error',
              tagName: event.target.tagName,
              resource: event.target.src || event.target.href
            });
          }
        }, true);
      },
      
      // Setup performance monitoring
      setupPerformanceMonitoring: function() {
        if ('PerformanceObserver' in window) {
          // Monitor long tasks
          try {
            const longTaskObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (entry.duration > 100) { // Tasks longer than 100ms
                  this.logError({
                    message: 'Long task detected',
                    duration: entry.duration
                  }, {
                    type: 'performance-issue',
                    metric: 'long-task',
                    duration: entry.duration,
                    startTime: entry.startTime
                  });
                }
              }
            });
            longTaskObserver.observe({ entryTypes: ['longtask'] });
          } catch (e) {
            // Long task API not supported
          }
          
          // Monitor layout shifts
          try {
            const clsObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (!entry.hadRecentInput && entry.value > 0.25) { // Significant layout shifts
                  this.logError({
                    message: 'Significant layout shift detected',
                    value: entry.value
                  }, {
                    type: 'performance-issue',
                    metric: 'layout-shift',
                    value: entry.value,
                    sources: entry.sources?.map(s => s.node?.tagName).join(', ')
                  });
                }
              }
            });
            clsObserver.observe({ entryTypes: ['layout-shift'] });
          } catch (e) {
            // Layout shift API not supported
          }
        }
      },
      
      // Setup network error monitoring
      setupNetworkErrorMonitoring: function() {
        // Monitor fetch failures
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
          return originalFetch.apply(this, args)
            .catch(error => {
              window.errorMonitoring.logError(error, {
                type: 'network-error',
                url: args[0],
                method: args[1]?.method || 'GET'
              });
              throw error;
            });
        };
        
        // Monitor XMLHttpRequest failures
        const originalXHROpen = XMLHttpRequest.prototype.open;
        XMLHttpRequest.prototype.open = function(method, url, ...args) {
          this.addEventListener('error', () => {
            window.errorMonitoring.logError({
              message: 'XMLHttpRequest failed',
              status: this.status,
              statusText: this.statusText
            }, {
              type: 'network-error',
              method: method,
              url: url,
              status: this.status
            });
          });
          
          return originalXHROpen.call(this, method, url, ...args);
        };
      },
      
      // Show error feedback to user
      showErrorFeedback: function(errorData) {
        if (!enableUserFeedback) return;
        
        const notification = document.createElement('div');
        notification.className = 'error-notification';
        notification.innerHTML = `
          <div class="alert alert-error shadow-lg fixed top-4 right-4 z-50 max-w-md">
            <div>
              <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div>
                <h3 class="font-bold">Something went wrong</h3>
                <div class="text-xs">We've logged this error for investigation.</div>
              </div>
            </div>
            <div class="flex-none">
              <button class="btn btn-sm btn-ghost" onclick="this.closest('.error-notification').remove()">
                Dismiss
              </button>
            </div>
          </div>
        `;
        
        document.body.appendChild(notification);
        
        // Auto-remove after 10 seconds
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 10000);
      },
      
      // Get error summary for debugging
      getErrorSummary: function() {
        return {
          totalErrors: this.errorCount,
          recentErrors: this.errors.slice(-5),
          errorsByType: this.errors.reduce((acc, error) => {
            const type = error.type || 'unknown';
            acc[type] = (acc[type] || 0) + 1;
            return acc;
          }, {}),
          sessionInfo: {
            userAgent: navigator.userAgent,
            url: window.location.href,
            timestamp: new Date().toISOString(),
            viewport: {
              width: window.innerWidth,
              height: window.innerHeight
            }
          }
        };
      },
      
      // Clear error log
      clearErrors: function() {
        this.errors = [];
        this.errorCount = 0;
        try {
          localStorage.removeItem('errorLog');
        } catch (e) {
          // localStorage might not be available
        }
        
        if (logToConsole) {
          console.log('🔍 Error log cleared');
        }
      }
    };
    
    // Initialize error monitoring when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        window.errorMonitoring.init();
      });
    } else {
      window.errorMonitoring.init();
    }
    
    // Expose error summary to console for debugging
    if (logToConsole) {
      window.getErrorSummary = () => {
        console.table(window.errorMonitoring.getErrorSummary());
        return window.errorMonitoring.getErrorSummary();
      };
    }
  </script>
)}

<!-- Error notification styles -->
<style>
  .error-notification {
    z-index: 9999;
  }
  
  .error-notification .alert {
    animation: slideInRight 0.3s ease-out;
  }
  
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>