---
import type { CollectionEntry } from 'astro:content';
import { formatDate } from '../utils/formatting';

export interface Props {
  post: CollectionEntry<'posts'>;
  featured?: boolean;
  className?: string;
  // Optional body content for enhanced reading time calculation
  body?: string;
  // Accessibility props
  'aria-labelledby'?: string;
  'data-post-index'?: number;
}

const { 
  post, 
  featured = false, 
  className = '', 
  body,
  'aria-labelledby': ariaLabelledBy,
  'data-post-index': postIndex
} = Astro.props;

// Enhanced reading time calculation function
function calculateReadingTime(content: string): number {
  // Average reading speed: 200 words per minute
  const wordsPerMinute = 200;
  const words = content.trim().split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return Math.max(1, minutes); // Minimum 1 minute
}

// Calculate reading time with enhanced algorithm
// Priority: 1. Use provided body content, 2. Fall back to description
const contentForReadingTime = body || post.data.description || '';
const readingTime = calculateReadingTime(contentForReadingTime);

// Format the date
const formattedDate = formatDate(post.data.date.toString());

// Generate blog post URL
const href = `/blog/${post.slug}/`;

// Handle cover image path - images are in src/assets/images/
const coverImageSrc = post.data.cover ? `/src/assets/images/${post.data.cover}` : null;
---

<article 
  class={`bg-base-100 border border-base-300 rounded-xl shadow-lg hover:shadow-xl hover:border-primary group cursor-pointer transition-all duration-300 overflow-hidden flex flex-col ${featured ? 'featured-post' : ''} ${className}`}
  style="height: 100%; min-height: 400px;"
  role="article"
  aria-labelledby={ariaLabelledBy || `post-title-${post.slug}`}
  data-post-index={postIndex}
>
  <a 
    href={href}
    class="block text-decoration-none flex flex-col h-full"
    aria-describedby={postIndex !== undefined ? `post-summary-${postIndex}` : `post-excerpt-${post.slug}`}
  >
    {coverImageSrc ? (
      <div class="aspect-video overflow-hidden rounded-t-xl">
        <img 
          src={coverImageSrc} 
          alt={`Cover image for ${post.data.title}`}
          class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          loading="lazy"
        />
      </div>
    ) : (
      <div class="aspect-video overflow-hidden rounded-t-xl bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center">
        <div class="text-center p-6">
          <div class="w-16 h-16 mx-auto mb-4 bg-primary/30 rounded-full flex items-center justify-center">
            <svg class="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 011 1l4 4v9a2 2 0 01-2 2z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 2v4a2 2 0 002 2h4"></path>
            </svg>
          </div>
          <h4 class="text-sm font-medium text-base-content/60 line-clamp-2">
            Blog Post
          </h4>
        </div>
      </div>
    )}
    
    <div class="p-6 flex-1 flex flex-col">
      {featured && (
        <div class="mb-3">
          <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary text-primary-content">
            ⭐ Featured
          </span>
        </div>
      )}
      
      <div class="flex flex-wrap items-center gap-3 text-xs text-base-content/60 mb-3">
        <time datetime={post.data.date.toISOString()} class="flex items-center gap-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          {formattedDate}
        </time>
        
        <span class="flex items-center gap-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          {readingTime} min read
        </span>
        
        {post.data.author && (
          <span class="flex items-center gap-1">
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            {post.data.author}
          </span>
        )}
      </div>
      
      <h3 
        id={postIndex !== undefined ? `post-title-${postIndex}` : `post-title-${post.slug}`}
        class="text-xl font-bold text-base-content mb-3 group-hover:text-primary transition-colors line-clamp-2"
      >
        {post.data.title}
      </h3>
      
      <p 
        id={postIndex !== undefined ? `post-summary-${postIndex}` : `post-excerpt-${post.slug}`}
        class="text-base-content/80 line-clamp-3 mb-4"
      >
        {post.data.description}
      </p>
      
      {post.data.tags && post.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-1 mb-4">
          {post.data.tags.slice(0, 3).map(tag => (
            <span 
              key={tag}
              class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary border border-primary/20 hover:bg-primary/20 transition-colors"
            >
              {tag}
            </span>
          ))}
          {post.data.tags.length > 3 && (
            <span class="text-xs text-base-content/50 px-2 py-1">
              +{post.data.tags.length - 3} more
            </span>
          )}
        </div>
      )}
      
      <div class="flex items-center justify-between mt-auto pt-4">
        <span class="text-primary font-medium group-hover:underline transition-colors">
          Read more →
        </span>
      </div>
    </div>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

