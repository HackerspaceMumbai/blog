---
// Performance monitoring component for Core Web Vitals and custom metrics
export interface Props {
  enableConsoleLogging?: boolean;
  enableAnalytics?: boolean;
  analyticsEndpoint?: string;
}

const {
  enableConsoleLogging = true,
  enableAnalytics = false,
  analyticsEndpoint
} = Astro.props;
---

<script define:vars={{ enableConsoleLogging, enableAnalytics, analyticsEndpoint }}>
  // Performance monitoring utilities
  class PerformanceMonitor {
    constructor(options = {}) {
      this.enableConsoleLogging = options.enableConsoleLogging ?? true;
      this.enableAnalytics = options.enableAnalytics ?? false;
      this.analyticsEndpoint = options.analyticsEndpoint;
      this.metrics = new Map();
      
      this.init();
    }
    
    init() {
      // Initialize Core Web Vitals monitoring
      this.initWebVitals();
      
      // Initialize custom performance monitoring
      this.initCustomMetrics();
      
      // Initialize resource timing monitoring
      this.initResourceTiming();
      
      // Initialize user interaction monitoring
      this.initUserInteractionMonitoring();
    }
    
    initWebVitals() {
      // Load web-vitals library dynamically
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/web-vitals@3/dist/web-vitals.iife.js';
      script.onload = () => {
        if (typeof webVitals !== 'undefined') {
          webVitals.getCLS(this.handleMetric.bind(this));
          webVitals.getFID(this.handleMetric.bind(this));
          webVitals.getFCP(this.handleMetric.bind(this));
          webVitals.getLCP(this.handleMetric.bind(this));
          webVitals.getTTFB(this.handleMetric.bind(this));
          webVitals.getINP(this.handleMetric.bind(this));
        }
      };
      document.head.appendChild(script);
    }
    
    initCustomMetrics() {
      // Monitor page load performance
      window.addEventListener('load', () => {
        const navigation = performance.getEntriesByType('navigation')[0];
        if (navigation) {
          this.handleMetric({
            name: 'DOM_CONTENT_LOADED',
            value: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
            id: 'custom-dcl'
          });
          
          this.handleMetric({
            name: 'LOAD_EVENT',
            value: navigation.loadEventEnd - navigation.loadEventStart,
            id: 'custom-load'
          });
        }
      });
      
      // Monitor long tasks
      if ('PerformanceObserver' in window) {
        try {
          const longTaskObserver = new PerformanceObserver((list) => {
            for (const entry of list.getEntries()) {
              if (entry.duration > 50) {
                this.handleMetric({
                  name: 'LONG_TASK',
                  value: entry.duration,
                  id: `long-task-${Date.now()}`
                });
              }
            }
          });
          longTaskObserver.observe({ entryTypes: ['longtask'] });
        } catch (e) {
          // Long task API not supported
        }
      }
    }
    
    initResourceTiming() {
      if ('PerformanceObserver' in window) {
        const resourceObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            // Monitor slow resources
            if (entry.duration > 1000) {
              this.handleMetric({
                name: 'SLOW_RESOURCE',
                value: entry.duration,
                id: `slow-resource-${entry.name}`,
                details: {
                  name: entry.name,
                  type: entry.initiatorType,
                  size: entry.transferSize
                }
              });
            }
          }
        });
        
        try {
          resourceObserver.observe({ entryTypes: ['resource'] });
        } catch (e) {
          // Resource timing API not supported
        }
      }
    }
    
    initUserInteractionMonitoring() {
      // Monitor first user interaction
      let firstInteraction = true;
      const interactionEvents = ['click', 'keydown', 'touchstart'];
      
      const handleFirstInteraction = (event) => {
        if (firstInteraction) {
          firstInteraction = false;
          this.handleMetric({
            name: 'FIRST_INTERACTION',
            value: performance.now(),
            id: 'first-interaction',
            details: {
              type: event.type,
              target: event.target.tagName
            }
          });
          
          // Remove listeners after first interaction
          interactionEvents.forEach(eventType => {
            document.removeEventListener(eventType, handleFirstInteraction, true);
          });
        }
      };
      
      interactionEvents.forEach(eventType => {
        document.addEventListener(eventType, handleFirstInteraction, true);
      });
    }
    
    handleMetric(metric) {
      // Store metric
      this.metrics.set(metric.name, metric);
      
      // Console logging
      if (this.enableConsoleLogging) {
        const value = metric.name === 'CLS' ? (metric.value * 1000).toFixed(2) : Math.round(metric.value);
        console.log(`ðŸ“Š ${metric.name}: ${value}${metric.name === 'CLS' ? '' : 'ms'}`, metric);
      }
      
      // Send to analytics
      if (this.enableAnalytics) {
        this.sendToAnalytics(metric);
      }
      
      // Trigger custom event
      window.dispatchEvent(new CustomEvent('performance-metric', {
        detail: metric
      }));
    }
    
    sendToAnalytics(metric) {
      // Google Analytics 4
      if (typeof gtag !== 'undefined') {
        gtag('event', metric.name.toLowerCase(), {
          event_category: 'Web Vitals',
          value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
          event_label: metric.id,
          non_interaction: true,
        });
      }
      
      // Custom analytics endpoint
      if (this.analyticsEndpoint) {
        fetch(this.analyticsEndpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            metric: metric.name,
            value: metric.value,
            id: metric.id,
            url: window.location.href,
            userAgent: navigator.userAgent,
            timestamp: Date.now(),
            details: metric.details
          })
        }).catch(error => {
          console.warn('Failed to send metric to analytics:', error);
        });
      }
    }
    
    // Public API methods
    getMetric(name) {
      return this.metrics.get(name);
    }
    
    getAllMetrics() {
      return Object.fromEntries(this.metrics);
    }
    
    // Custom metric tracking
    trackCustomMetric(name, value, details = {}) {
      this.handleMetric({
        name: `CUSTOM_${name.toUpperCase()}`,
        value,
        id: `custom-${name}-${Date.now()}`,
        details
      });
    }
    
    // Performance budget checking
    checkPerformanceBudget() {
      const budgets = {
        LCP: 2500,  // 2.5s
        FID: 100,   // 100ms
        CLS: 0.1,   // 0.1
        FCP: 1800,  // 1.8s
        TTFB: 800   // 800ms
      };
      
      const results = {};
      
      Object.entries(budgets).forEach(([metric, budget]) => {
        const value = this.metrics.get(metric);
        if (value) {
          const actualValue = metric === 'CLS' ? value.value : Math.round(value.value);
          results[metric] = {
            budget,
            actual: actualValue,
            passed: actualValue <= budget,
            difference: actualValue - budget
          };
        }
      });
      
      return results;
    }
  }
  
  // Initialize performance monitor
  window.performanceMonitor = new PerformanceMonitor({
    enableConsoleLogging,
    enableAnalytics,
    analyticsEndpoint
  });
  
  // Expose performance utilities globally
  window.trackCustomMetric = (name, value, details) => {
    window.performanceMonitor.trackCustomMetric(name, value, details);
  };
  
  window.getPerformanceMetrics = () => {
    return window.performanceMonitor.getAllMetrics();
  };
  
  window.checkPerformanceBudget = () => {
    return window.performanceMonitor.checkPerformanceBudget();
  };
  
  // Performance debugging helpers
  if (enableConsoleLogging) {
    // Add performance debugging to console
    console.log('ðŸš€ Performance monitoring initialized');
    console.log('ðŸ“Š Use getPerformanceMetrics() to view all metrics');
    console.log('ðŸ’° Use checkPerformanceBudget() to check performance budget');
    console.log('ðŸ“ˆ Use trackCustomMetric(name, value, details) to track custom metrics');
  }
</script>

<style>
  /* Performance monitoring indicator (development only) */
  .perf-indicator {
    position: fixed;
    top: 10px;
    right: 10px;
    background: var(--color-base-200);
    border: 1px solid var(--color-primary);
    border-radius: var(--radius-md);
    padding: var(--space-sm);
    font-size: var(--text-xs);
    z-index: var(--z-toast);
    opacity: 0.8;
    pointer-events: none;
  }
  
  .perf-indicator.good {
    border-color: var(--color-success);
    color: var(--color-success);
  }
  
  .perf-indicator.needs-improvement {
    border-color: var(--color-warning);
    color: var(--color-warning);
  }
  
  .perf-indicator.poor {
    border-color: var(--color-error);
    color: var(--color-error);
  }
  
  /* Hide in production */
  @media (min-width: 1px) {
    .perf-indicator {
      display: none;
    }
  }
</style>