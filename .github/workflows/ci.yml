name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install chromium

      - name: Run CI Test Orchestrator
        run: pnpm test:ci-orchestrator
        env:
          CI: true

      - name: Build project
        run: pnpm build

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

      - name: Upload CI reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-reports-${{ matrix.node-version }}
          path: ci-reports/
          retention-days: 7

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports-${{ matrix.node-version }}
          path: accessibility-reports/
          retention-days: 7

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ matrix.node-version }}
          path: security-reports/
          retention-days: 7

  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Verify Netlify credentials
        run: |
          if [ -z "$NETLIFY_AUTH_TOKEN" ]; then
            echo "::error::NETLIFY_AUTH_TOKEN is not set. Please add it to repository secrets."
            echo "::error::Go to Settings > Secrets and variables > Actions and add NETLIFY_AUTH_TOKEN"
            exit 1
          fi
          if [ -z "$NETLIFY_SITE_ID" ]; then
            echo "::error::NETLIFY_SITE_ID is not set. Please add it to repository secrets."
            echo "::error::Go to Settings > Secrets and variables > Actions and add NETLIFY_SITE_ID"
            exit 1
          fi
          echo "Verifying Netlify authentication..."
          netlify status --json
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Build project
        run: pnpm build

      - name: Deploy to Netlify (Preview)
        id: deploy-preview
        run: |
          # Deploy and capture output
          DEPLOY_OUTPUT=$(pnpm deploy:preview:ci)
          echo "$DEPLOY_OUTPUT"
          
          # Extract deployment URL from JSON output
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | jq -r '.deploy_url // .url // empty')
          
          if [ -n "$DEPLOY_URL" ]; then
            echo "deploy-url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "✅ Deployment URL: $DEPLOY_URL"
          else
            echo "⚠️ Could not extract deployment URL from output"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Run Post-Deployment Health Check
        if: steps.deploy-preview.outputs.deploy-url
        id: health-check
        run: |
          DEPLOY_URL="${{ steps.deploy-preview.outputs.deploy-url }}"
          echo "🏥 Running health check for: $DEPLOY_URL"
          
          # Run health check and capture results
          if node scripts/post-deployment-verify.js "$DEPLOY_URL" --json-output health-check-results.json; then
            echo "health-check-status=success" >> $GITHUB_OUTPUT
            echo "✅ Health check passed"
          else
            echo "health-check-status=failed" >> $GITHUB_OUTPUT
            echo "❌ Health check failed"
          fi
        continue-on-error: true

      - name: Upload Health Check Results
        if: always() && steps.deploy-preview.outputs.deploy-url
        uses: actions/upload-artifact@v4
        with:
          name: health-check-results-preview
          path: |
            health-check-results.json
            deployment-verification.json
          retention-days: 7

      - name: Create Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Preview Deployment Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.deploy-preview.outputs.deploy-url }}" ]; then
            echo "- **Deployment URL**: ${{ steps.deploy-preview.outputs.deploy-url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.health-check.outputs.health-check-status }}" = "success" ]; then
              echo "- **Health Check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ steps.health-check.outputs.health-check-status }}" = "failed" ]; then
              echo "- **Health Check**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Health Check**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: ❌ Deployment failed or URL not available" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.deploy-preview.outputs.deploy-url }}" ]; then
            echo "- [Preview Site](${{ steps.deploy-preview.outputs.deploy-url }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Health Check](${{ steps.deploy-preview.outputs.deploy-url }}/.netlify/functions/health)" >> $GITHUB_STEP_SUMMARY
          fi

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Verify Netlify credentials
        run: |
          if [ -z "$NETLIFY_AUTH_TOKEN" ]; then
            echo "::error::NETLIFY_AUTH_TOKEN is not set. Please add it to repository secrets."
            echo "::error::Go to Settings > Secrets and variables > Actions and add NETLIFY_AUTH_TOKEN"
            exit 1
          fi
          if [ -z "$NETLIFY_SITE_ID" ]; then
            echo "::error::NETLIFY_SITE_ID is not set. Please add it to repository secrets."
            echo "::error::Go to Settings > Secrets and variables > Actions and add NETLIFY_SITE_ID"
            exit 1
          fi
          echo "Verifying Netlify authentication..."
          netlify status --json
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Build project
        run: pnpm build

      - name: Deploy to Netlify (Production)
        id: deploy-production
        run: |
          # Deploy and capture output
          DEPLOY_OUTPUT=$(pnpm deploy:prod:ci)
          echo "$DEPLOY_OUTPUT"
          
          # Extract deployment URL from JSON output
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | jq -r '.deploy_url // .url // "https://hackmum.in"')
          
          echo "deploy-url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "✅ Production deployment URL: $DEPLOY_URL"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Run Post-Deployment Health Check
        id: health-check-prod
        run: |
          DEPLOY_URL="${{ steps.deploy-production.outputs.deploy-url }}"
          echo "🏥 Running health check for: $DEPLOY_URL"
          
          # Run comprehensive health check
          if node scripts/post-deployment-verify.js "$DEPLOY_URL" --json-output health-check-results.json; then
            echo "health-check-status=success" >> $GITHUB_OUTPUT
            echo "✅ Health check passed"
          else
            echo "health-check-status=failed" >> $GITHUB_OUTPUT
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Run production smoke tests
        run: pnpm smoke:test:production

      - name: Upload Health Check Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-results-production
          path: |
            health-check-results.json
            deployment-verification.json
          retention-days: 30

      - name: Create Production Deployment Summary
        if: always()
        run: |
          echo "## 🌍 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment URL**: ${{ steps.deploy-production.outputs.deploy-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.health-check-prod.outputs.health-check-status }}" = "success" ]; then
            echo "- **Health Check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Health Check**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Production Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Live Site](${{ steps.deploy-production.outputs.deploy-url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Check](${{ steps.deploy-production.outputs.deploy-url }}/.netlify/functions/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [Blog](${{ steps.deploy-production.outputs.deploy-url }}/blog)" >> $GITHUB_STEP_SUMMARY
          echo "- [Events](${{ steps.deploy-production.outputs.deploy-url }}/events)" >> $GITHUB_STEP_SUMMARY